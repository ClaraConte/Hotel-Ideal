/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hotel.vistas;

import hotel.modelo.Conexion;
import hotel.modelo.TipoHabitacion;
import hotel.modelo.TipoHabitacionData;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author clara
 */
public class VistaTiposHabitaciones extends javax.swing.JInternalFrame {

    private ArrayList<TipoHabitacion> listaID;

    /**
     * Creates new form VistaTiposHabitaciones
     */
    private Conexion conexion;
    private TipoHabitacionData tipoHabitacionData;
    private ArrayList<TipoHabitacion> listaTipos;

    public VistaTiposHabitaciones() {
        initComponents();

        try {
            conexion = new Conexion();
            //carga el comboBox con los ID de la BD
            tipoHabitacionData = new TipoHabitacionData(conexion);
            
            listaTipos = (ArrayList)tipoHabitacionData.obtenerTipoHabitacion();
            TipoHabitacion tipoNuevo = new TipoHabitacion();
            tipoNuevo.setTipoHabitacionNombre("Nuevo");
            listaTipos.add(0, tipoNuevo);
            cargarTipos();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(TipoHabitacionData.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        textTitleHabitaciones = new javax.swing.JLabel();
        textTipoHabitacionNombre = new javax.swing.JLabel();
        textTipoHabitacionPrecio = new javax.swing.JLabel();
        tipoHabitacionGuardar = new javax.swing.JButton();
        tipoHabitacionEditar = new javax.swing.JButton();
        tipoHabitacionLimpiar = new javax.swing.JButton();
        tipoHabitacionEliminar = new javax.swing.JButton();
        textTipoHabitacionPersonas = new javax.swing.JLabel();
        tipoHabitacionNombre = new javax.swing.JTextField();
        tipoHabitacionPersonas = new javax.swing.JComboBox<>();
        tipoHabitacionPrecio = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        tipoHabitacionId = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);

        textTitleHabitaciones.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        textTitleHabitaciones.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hotel/vistas/resources/hierarchical-structure.png"))); // NOI18N
        textTitleHabitaciones.setText("  TIPOS DE HABITACIONES");

        textTipoHabitacionNombre.setText("Seleccione");

        textTipoHabitacionPrecio.setText("PRECIO POR NOCHE");

        tipoHabitacionGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hotel/vistas/resources/checked-1.png"))); // NOI18N
        tipoHabitacionGuardar.setText("GUARDAR");
        tipoHabitacionGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tipoHabitacionGuardarActionPerformed(evt);
            }
        });

        tipoHabitacionEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hotel/vistas/resources/pencil.png"))); // NOI18N
        tipoHabitacionEditar.setText("EDITAR");
        tipoHabitacionEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tipoHabitacionEditarActionPerformed(evt);
            }
        });

        tipoHabitacionLimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hotel/vistas/resources/escoba.png"))); // NOI18N
        tipoHabitacionLimpiar.setText("LIMPIAR");
        tipoHabitacionLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tipoHabitacionLimpiarActionPerformed(evt);
            }
        });

        tipoHabitacionEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hotel/vistas/resources/cancel.png"))); // NOI18N
        tipoHabitacionEliminar.setText("ELIMINAR");
        tipoHabitacionEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tipoHabitacionEliminarActionPerformed(evt);
            }
        });

        textTipoHabitacionPersonas.setText("CAPACIDAD  MAX");

        tipoHabitacionPersonas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4" }));

        jLabel7.setText("Persona/s");

        tipoHabitacionId.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                tipoHabitacionIdItemStateChanged(evt);
            }
        });

        jLabel1.setText("Nombre");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 813, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(textTitleHabitaciones, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(217, 217, 217))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(96, 96, 96)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(tipoHabitacionGuardar)
                                .addComponent(textTipoHabitacionPersonas)
                                .addComponent(textTipoHabitacionPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tipoHabitacionId, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(17, 17, 17))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(117, 117, 117)
                        .addComponent(textTipoHabitacionNombre)))
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tipoHabitacionPersonas, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(tipoHabitacionNombre)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(tipoHabitacionEditar)
                            .addGap(93, 93, 93)
                            .addComponent(tipoHabitacionLimpiar)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 96, Short.MAX_VALUE)
                            .addComponent(tipoHabitacionEliminar))
                        .addComponent(tipoHabitacionPrecio))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jLabel1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(textTitleHabitaciones, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(textTipoHabitacionNombre))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tipoHabitacionNombre, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tipoHabitacionId, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textTipoHabitacionPersonas, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tipoHabitacionPersonas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textTipoHabitacionPrecio)
                    .addComponent(tipoHabitacionPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(53, 53, 53)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tipoHabitacionGuardar)
                    .addComponent(tipoHabitacionEditar)
                    .addComponent(tipoHabitacionLimpiar)
                    .addComponent(tipoHabitacionEliminar))
                .addGap(66, 66, 66))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tipoHabitacionIdItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_tipoHabitacionIdItemStateChanged
        // TODO add your handling code here:
        TipoHabitacion habitacionPorTipo = (TipoHabitacion) tipoHabitacionId.getSelectedItem();
        if(tipoHabitacionId.getSelectedIndex() > 0){
            TipoHabitacion tipoHabitacion = tipoHabitacionData.buscarTipoHabitacion(habitacionPorTipo.getTipoHabitacionId());
            if (tipoHabitacion != null) {
                String personas = String.valueOf(tipoHabitacion.getTipoHabitacioCapacidadMax());
                tipoHabitacionNombre.setText(tipoHabitacion.getTipoHabitacionNombre());
                tipoHabitacionPrecio.setText(String.valueOf(tipoHabitacion.getTipoHabitacionPrecio()));
                tipoHabitacionPersonas.setSelectedItem(personas);
            } 
        }else {
                vaciarCampos();
            }
    }//GEN-LAST:event_tipoHabitacionIdItemStateChanged

    private void tipoHabitacionGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tipoHabitacionGuardarActionPerformed
        // TODO add your handling code here:
            if (tipoHabitacionId.getSelectedIndex()!= 0){
                JOptionPane.showMessageDialog(null, "Para crear un tipo de habitación, seleccione la opción 'Nuevo' ");
            } else if (tipoHabitacionNombre.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Nombre Tipo no puede estar vacio");
            } else if (tipoHabitacionPrecio.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Precio por Noche no puede estar vacio");
            } else if (!validarCampoPrecio(tipoHabitacionPrecio.getText())) {
                JOptionPane.showMessageDialog(null, "Precio por noche solo ingrese valores numéricos");
            } else {
                TipoHabitacion tipoHabitacion1 = new TipoHabitacion();
                tipoHabitacion1.setTipoHabitacionNombre(tipoHabitacionNombre.getText());
                tipoHabitacion1.setTipoHabitacioCapacidadMax(Integer.parseInt(tipoHabitacionPersonas.getSelectedItem().toString()));
                tipoHabitacion1.setTipoHabitacionPrecio(Double.parseDouble(tipoHabitacionPrecio.getText()));

                tipoHabitacionData.guardarTipoHabitacion(tipoHabitacion1);
                JOptionPane.showMessageDialog(null, "Nuevo Tipo de Habitacion guardado");
                tipoHabitacionId.removeAllItems();
                cargarTipos();
    }//GEN-LAST:event_tipoHabitacionGuardarActionPerformed
    }

    private void tipoHabitacionEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tipoHabitacionEditarActionPerformed
        // TODO add your handling code here:
        TipoHabitacion habitacionPorTipo = (TipoHabitacion) tipoHabitacionId.getSelectedItem();
        if (tipoHabitacionId.getSelectedIndex() == 0){
                JOptionPane.showMessageDialog(null, "Para crear un tipo de habitación, seleccione la opción 'Nuevo' ");
        } else if(tipoHabitacionNombre.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Nombre Tipo no puede estar vacio");
        } else if (tipoHabitacionPrecio.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Precio por Noche no puede estar vacio");
        } else if(!validarCampoPrecio(tipoHabitacionPrecio.getText())) {
            JOptionPane.showMessageDialog(null, " Precio por noche solo ingrese valores numéricos");
        } else {
            TipoHabitacion tipoHabitacion = tipoHabitacionData.buscarTipoHabitacion(habitacionPorTipo.getTipoHabitacionId());
            if(tipoHabitacion!=null){
                int resp = JOptionPane.showConfirmDialog(null, "¿Esta seguro que quiere guardar los cambios?", "Alerta!", JOptionPane.YES_NO_OPTION);
                if (resp != 1) {
                    tipoHabitacion.setTipoHabitacionNombre(tipoHabitacionNombre.getText());
                    tipoHabitacion.setTipoHabitacioCapacidadMax(Integer.parseInt(tipoHabitacionPersonas.getSelectedItem().toString()));
                    tipoHabitacion.setTipoHabitacionPrecio(Double.parseDouble(tipoHabitacionPrecio.getText()));
                    tipoHabitacionData.editarTipoHabitacion(tipoHabitacion);
                    JOptionPane.showMessageDialog(null, " Datos editados! ");
                } else {
                    JOptionPane.showMessageDialog(null, "No se realizaron cambios");
                    vaciarCampos();
                }
            }else{
            JOptionPane.showMessageDialog(null, "No se realizaron cambios, no se encontró ID");
            }
            tipoHabitacionId.removeAllItems();
            cargarTipos();
        }
    }//GEN-LAST:event_tipoHabitacionEditarActionPerformed

    private void tipoHabitacionLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tipoHabitacionLimpiarActionPerformed
        // TODO add your handling code here:
        vaciarCampos();
    }//GEN-LAST:event_tipoHabitacionLimpiarActionPerformed

    private void tipoHabitacionEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tipoHabitacionEliminarActionPerformed
        // TODO add your handling code here:
        TipoHabitacion habitacionPorTipo = (TipoHabitacion) tipoHabitacionId.getSelectedItem();
        int resp = JOptionPane.showConfirmDialog(null, "¿Esta seguro que quiere borrar este tipo de habitacion?", "Alerta!", JOptionPane.YES_NO_OPTION);
        if (resp != 1) {
            tipoHabitacionData.borrarTipoHabitacion(habitacionPorTipo.getTipoHabitacionId());
            JOptionPane.showMessageDialog(null, "Tipo de habitacion borrado");
            vaciarCampos();
           // tipoHabitacionId.removeItemAt((int)tipoHabitacionId.getSelectedItem());
        } else {
            JOptionPane.showMessageDialog(null, "Accion cancelada");
        }
    }//GEN-LAST:event_tipoHabitacionEliminarActionPerformed
    
    private void cargarTipos(){
        listaTipos.forEach((item) -> {
            tipoHabitacionId.addItem(item);
        });
    }
    
    //AUXILIARES
    private boolean validarCampoPrecio(String value) {
        try {
            double num = Double.parseDouble(value);
            return true;
        } catch (Exception ex) {
            return false;
        }
    }
    
    // Vacia campos en formulario
    private void vaciarCampos() {
        //tipoHabitacionId.setSelectedIndex(0);
        tipoHabitacionNombre.setText(" ");
        tipoHabitacionPersonas.setSelectedItem("1");
        tipoHabitacionPrecio.setText(" ");
    }
    
    // completar los campos despues de eliminar un tipoHabitacion 
    private void llenarCampos() {
        String tipoID = tipoHabitacionId.getSelectedItem().toString();
        TipoHabitacion tipoHabitacion = tipoHabitacionData.buscarTipoHabitacion(Integer.parseInt(tipoID));
        String personas = String.valueOf(tipoHabitacion.getTipoHabitacioCapacidadMax());
        tipoHabitacionNombre.setText(tipoHabitacion.getTipoHabitacionNombre());
        tipoHabitacionPrecio.setText(String.valueOf(tipoHabitacion.getTipoHabitacionPrecio()));
        tipoHabitacionPersonas.setSelectedItem(personas);

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel textTipoHabitacionNombre;
    private javax.swing.JLabel textTipoHabitacionPersonas;
    private javax.swing.JLabel textTipoHabitacionPrecio;
    private javax.swing.JLabel textTitleHabitaciones;
    private javax.swing.JButton tipoHabitacionEditar;
    private javax.swing.JButton tipoHabitacionEliminar;
    private javax.swing.JButton tipoHabitacionGuardar;
    private javax.swing.JComboBox<TipoHabitacion> tipoHabitacionId;
    private javax.swing.JButton tipoHabitacionLimpiar;
    private javax.swing.JTextField tipoHabitacionNombre;
    private javax.swing.JComboBox<String> tipoHabitacionPersonas;
    private javax.swing.JTextField tipoHabitacionPrecio;
    // End of variables declaration//GEN-END:variables
}
