/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hotel.vistas;

import hotel.modelo.CamasHabitacion;
import hotel.modelo.Conexion;
import hotel.modelo.Habitacion;
import hotel.modelo.HabitacionData;
import hotel.modelo.Huesped;
import hotel.modelo.HuespedData;
import hotel.modelo.Reservas;
import hotel.modelo.ReservasData;
import hotel.modelo.TipoCama;
import hotel.modelo.TipoHabitacion;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author clara
 */
public class VistaReservasLista extends javax.swing.JInternalFrame {

    /**
     * Creates new form VistaHabitaciones
     */
    private Conexion conexion;
    private ReservasData reservasData;
    private HuespedData huespedData;
    private HabitacionData habitacionData;
    private DefaultTableModel model;
    private ArrayList<Reservas> listaReservas;
    private ArrayList<Reservas> listaReservasFechas;
    private ArrayList<Huesped> listaHuesped;

    public VistaReservasLista() {
        initComponents();
        try {
            conexion = new Conexion();
            model = new DefaultTableModel();

            reservasData = new ReservasData(conexion);
            huespedData = new HuespedData(conexion);
            habitacionData = new HabitacionData(conexion);

            listaHuesped = (ArrayList) huespedData.obtenerHuespedes();
            listaReservas = (ArrayList) reservasData.listadoDeReservas();

            cargaHuespedes();
            headersTablaHabitaciones();

            setConfiguracionJDateChooser();

            cargaDatosDeReserva();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(VistaReservas.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        listaReserva = new javax.swing.JTable();
        listaHuespedes = new javax.swing.JComboBox();
        titleListaReserva = new javax.swing.JLabel();
        titleListaFechaCheckOut = new javax.swing.JLabel();
        titleListaFechaCheckIn = new javax.swing.JLabel();
        titleListaHuespedes = new javax.swing.JLabel();
        listaFechaCheckIn = new com.toedter.calendar.JDateChooser();
        listaFechaCheckOut = new com.toedter.calendar.JDateChooser();
        listaReservafinalizar = new javax.swing.JButton();
        listaReservaEliminar = new javax.swing.JButton();
        listaReservaLimpiar = new javax.swing.JButton();
        titleListaEstado = new javax.swing.JLabel();
        listaEstado = new javax.swing.JComboBox<>();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);

        listaReserva.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        listaReserva.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(listaReserva);

        listaHuespedes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listaHuespedesActionPerformed(evt);
            }
        });

        titleListaReserva.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        titleListaReserva.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hotel/vistas/resources/list-5.png"))); // NOI18N
        titleListaReserva.setText("LISTADO DE RESERVAS");

        titleListaFechaCheckOut.setText("Fecha checkOut ");

        titleListaFechaCheckIn.setText("Fecha checkIn");

        titleListaHuespedes.setText("Filtrar por");

        listaFechaCheckIn.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                listaFechaCheckInPropertyChange(evt);
            }
        });

        listaFechaCheckOut.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                listaFechaCheckOutPropertyChange(evt);
            }
        });

        listaReservafinalizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hotel/vistas/resources/power.png"))); // NOI18N
        listaReservafinalizar.setText("FINALIZAR RESERVA");
        listaReservafinalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listaReservafinalizarActionPerformed(evt);
            }
        });

        listaReservaEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hotel/vistas/resources/cancel.png"))); // NOI18N
        listaReservaEliminar.setText("ELIMINAR REGISTRO");
        listaReservaEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listaReservaEliminarActionPerformed(evt);
            }
        });

        listaReservaLimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hotel/vistas/resources/escoba.png"))); // NOI18N
        listaReservaLimpiar.setText("REINICIAR BÃšSQUEDA");
        listaReservaLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listaReservaLimpiarActionPerformed(evt);
            }
        });

        titleListaEstado.setText("Estado");

        listaEstado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todos", "Activo", "Inactivo", " " }));
        listaEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listaEstadoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(listaReservaEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(listaReservaLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(472, 472, 472)
                                .addComponent(listaReservafinalizar, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1054, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(titleListaHuespedes, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(listaHuespedes, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(titleListaFechaCheckIn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(titleListaReserva, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(listaFechaCheckIn, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(titleListaFechaCheckOut)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(listaFechaCheckOut, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(titleListaEstado)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(listaEstado, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap(33, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(30, Short.MAX_VALUE)
                .addComponent(titleListaReserva)
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(listaHuespedes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(titleListaFechaCheckOut)
                        .addComponent(titleListaHuespedes)
                        .addComponent(titleListaFechaCheckIn))
                    .addComponent(listaFechaCheckIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(listaFechaCheckOut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(titleListaEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(listaEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(22, 22, 22)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(listaReservafinalizar)
                    .addComponent(listaReservaEliminar)
                    .addComponent(listaReservaLimpiar))
                .addGap(27, 27, 27))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void listaHuespedesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listaHuespedesActionPerformed
        cargaDatosDeReserva();
    }//GEN-LAST:event_listaHuespedesActionPerformed

    private void listaReservafinalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listaReservafinalizarActionPerformed
        // TODO add yo
        if (listaReserva.getSelectedRow() < 0) {
            JOptionPane.showMessageDialog(null," Debe seleccionar una Reserva ");
        } else if  (listaReserva.getValueAt(listaReserva.getSelectedRow(), 9) == "Inactiva" ){
            JOptionPane.showMessageDialog(null," La reserva ya estÃ¡ desactivada ");
            System.out.println("--"+listaReserva.getValueAt(listaReserva.getSelectedRow(), 0));
        } else{

            Habitacion habitacion = new Habitacion();
            habitacion = habitacionData.buscarHabitacion((int) listaReserva.getValueAt(listaReserva.getSelectedRow(), 3));
            
            Huesped huesped = new Huesped();
            huesped = huespedData.buscarHuesped((int) listaReserva.getValueAt(listaReserva.getSelectedRow(), 2));

             if (huesped != null && habitacion != null) {
                int resp = JOptionPane.showConfirmDialog(null, "La reserva serÃ¡ desactivada, seguro desea realizar esta operaciÃ³n ? ", "Alerta!", JOptionPane.YES_NO_OPTION);
                if (resp != 1) {
                    reservasData.finReserva(habitacion, huesped);
                    reiniciarCampos();
                    cargaDatosDeReserva();
                    JOptionPane.showMessageDialog(null, "Reserva desactivada");
                } else if (resp != 2) {
                    JOptionPane.showMessageDialog(null, "AcciÃ³n cancelada");
                    reiniciarCampos();
                }
            } 
        }        

    }//GEN-LAST:event_listaReservafinalizarActionPerformed

    private void listaReservaEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listaReservaEliminarActionPerformed
        // TODO add your 
        
        if (listaReserva.getSelectedRow() < 0) {
            JOptionPane.showMessageDialog(null," Debe seleccionar una Reserva ");
        } else {
            Reservas reserva = new Reservas();
            
            Habitacion habitacion = new Habitacion();
            habitacion = habitacionData.buscarHabitacion((int) listaReserva.getValueAt(listaReserva.getSelectedRow(), 3));
            habitacion.setHabitacionEstado(true);            

            reserva.setReservasId((int) listaReserva.getValueAt(listaReserva.getSelectedRow(), 0));

             if (habitacion != null && reserva != null) {
                int resp = JOptionPane.showConfirmDialog(null, "La reserva serÃ¡ eliminada, seguro desea realizar esta operaciÃ³n ? ", "Alerta!", JOptionPane.YES_NO_OPTION);
                if (resp != 1) {
                    
                    habitacionData.editarHabitacion(habitacion);
                    reservasData.eliminarReserva(reserva);
                    JOptionPane.showMessageDialog(null,habitacion.isHabitacionEstado()+ "La reserva ha sido eliminada");
                    cargaDatosDeReserva();
                } else if (resp != 2) {
                    JOptionPane.showMessageDialog(null, "AcciÃ³n cancelada");
                    reiniciarCampos();
                }
            } 
        }
        
      
    }//GEN-LAST:event_listaReservaEliminarActionPerformed

    private void listaReservaLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listaReservaLimpiarActionPerformed
        reiniciarCampos();
    }//GEN-LAST:event_listaReservaLimpiarActionPerformed

    private void listaFechaCheckInPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_listaFechaCheckInPropertyChange
        cargaDatosDeReserva();
        // TODO add your handling code here:
    }//GEN-LAST:event_listaFechaCheckInPropertyChange

    private void listaFechaCheckOutPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_listaFechaCheckOutPropertyChange
        cargaDatosDeReserva();
        // TODO add your handling code here:
    }//GEN-LAST:event_listaFechaCheckOutPropertyChange

    private void listaEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listaEstadoActionPerformed
        cargaDatosDeReserva();
        // TODO add your handling code here:
    }//GEN-LAST:event_listaEstadoActionPerformed

    // Carga huÃ©spedes al ComboBox
    public void cargaHuespedes() {
        Huesped huesped = null;
        huesped = new Huesped();
        huesped.setHuespedNombre("Todos");
        listaHuesped.add(0, huesped);
        listaHuesped.forEach((item) -> {
            listaHuespedes.addItem(item);
        });
    }

    // Carga cabeceras de la tabla y asigna el modelo
    public void headersTablaHabitaciones() {

        ArrayList<Object> columnas = new ArrayList<Object>();
        columnas.add("ID");
        columnas.add("Nombre huesped");
        columnas.add("DNI");
        columnas.add("Num. HabitaciÃ³n");
        columnas.add("Fecha checkIn");
        columnas.add("Fecha checkOut");
        columnas.add("Total dÃ­as");
        columnas.add("Monto");
        columnas.add("Fecha creaciÃ³n");
        columnas.add("Estado");

        for (Object it : columnas) {
            model.addColumn(it);
        }
        listaReserva.setModel(model);
        listaReserva.getColumnModel().getColumn(0).setMaxWidth(30);
        listaReserva.getColumnModel().getColumn(0).setMinWidth(0);

    }

    // Borrar Filas tabla 
    public void borraFilasTabla() {
        int totalRow = model.getRowCount() - 1;
        for (int row = totalRow; row >= 0; row--) {
            model.removeRow(row);
        }
    }

    // EvalÃºa segÃºn selecciÃ³n comboBox
    public void cargaDatosDeReserva() {
        borraFilasTabla();
        ArrayList <Reservas> listaFiltrada = new ArrayList<Reservas>();
        // Toma tipo seleccionado en el comboBox
        Huesped huesped = (Huesped) listaHuespedes.getSelectedItem();
        // Si el primero esta selccionado 
        if (listaHuespedes.getSelectedIndex() == 0) {
            // Obtiene todas las reservas
            listaReservas = (ArrayList) reservasData.listadoDeReservas();
        } else {
            // Obtiene datos de reserva por huesped seleccionado
            listaReservas = (ArrayList) reservasData.listadoDeReservas(huesped);
        }
        
        // Filtra por fecha
        if (listaFechaCheckIn.getDate() != null || listaFechaCheckOut.getDate() != null){
            listaFiltrada = filtraPorFecha(listaReservas);
            listaReservas.clear(); 
            listaReservas.addAll(listaFiltrada);
        }
        
        // Filtra por Estado
        if (listaEstado.getSelectedIndex()>0){
            listaFiltrada = filtraPorEstado();
            listaReservas.clear(); 
            listaReservas.addAll(listaFiltrada);
        }
        cargarDatosTabla(listaReservas);
    }

    // Filtra por Estado
    private ArrayList<Reservas> filtraPorEstado() {
        ArrayList<Reservas> listaReservasEstado = new ArrayList<Reservas>();
        for (Reservas reserva : listaReservas) { 
            if(listaEstado.getSelectedIndex()==1){
                if(reserva.isReservasEstado()){
                listaReservasEstado.add(reserva);
                }
            }
            if(listaEstado.getSelectedIndex()==2){
                if(!reserva.isReservasEstado()){
                listaReservasEstado.add(reserva);
                }
            }
        }
        return listaReservasEstado;
    }

    // Filtra por fecha
    private ArrayList<Reservas> filtraPorFecha(ArrayList<Reservas> listaReservas) {
        ArrayList<Reservas> listaReservasFechas = new ArrayList<Reservas>();
        for (Reservas reserva : listaReservas) {           
            if (listaFechaCheckIn.getDate() != null && formatearFecha(listaFechaCheckIn.getDate()).isEqual(reserva.getReservasFechaCheckin())) {
                listaReservasFechas.add(reserva);
            }
            else if (listaFechaCheckOut.getDate() != null && formatearFecha(listaFechaCheckOut.getDate()).isEqual(reserva.getReservasfechaCheckout())) {
                listaReservasFechas.add(reserva);
            }
        }
        return listaReservasFechas;
    }
 
    // Carga modelo con los datos a mostrar en la tabla
    private void cargarDatosTabla(ArrayList<Reservas> listaReservas) {

        if(!listaReservas.isEmpty()){
            // Lista las reservas enla tabla
            for (Reservas reservas : listaReservas) {            
                String estado = (reservas.isReservasEstado()) ? "Activa" : "Inactiva";
                // Asigna los valores a mostrar en la tabla 
                model.addRow(new Object[]{reservas.getReservasId(),reservas.getHuespedId().getHuespedNombre(), reservas.getHuespedId().getHuespedDni(), reservas.getHabitacionId().getHabitacionId(), reservas.getReservasFechaCheckin(), reservas.getReservasfechaCheckout(), reservas.getReservasDias(), reservas.getReservasMonto(),reservas.getReservasFechaCreacion() , estado});
            }
        }
    }

    // Convierte fecha tipo Date a LocalDate
    public LocalDate formatearFecha(Date date) {
        SimpleDateFormat formato = new SimpleDateFormat("YYYY-MM-dd");
        LocalDate fechaFormateada = LocalDate.parse(formato.format(date));
        return fechaFormateada;
    }

    // Verifica si fecha salida seleccionada es menor a la de inicio
    public boolean isFechaChecOutAnterior() {
        LocalDate fechaIn = formatearFecha(listaFechaCheckIn.getDate());
        LocalDate fechaOut = formatearFecha(listaFechaCheckOut.getDate());
        return fechaOut.isBefore(fechaIn);
    }

    // Inicializa calendario con valores por defecto
    public void setConfiguracionJDateChooser() {
        // Desactiva ediciÃ³n y carga manual de fechas
        listaFechaCheckIn.setDate(null);
        listaFechaCheckOut.setDate(null);
        ((JTextField) this.listaFechaCheckIn.getDateEditor()).setEditable(false);
        ((JTextField) this.listaFechaCheckOut.getDateEditor()).setEditable(false);
    }

    private void reiniciarCampos() {
        setConfiguracionJDateChooser();
        listaHuespedes.setSelectedIndex(0);
        listaEstado.setSelectedIndex(0);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> listaEstado;
    private com.toedter.calendar.JDateChooser listaFechaCheckIn;
    private com.toedter.calendar.JDateChooser listaFechaCheckOut;
    private javax.swing.JComboBox listaHuespedes;
    private javax.swing.JTable listaReserva;
    private javax.swing.JButton listaReservaEliminar;
    private javax.swing.JButton listaReservaLimpiar;
    private javax.swing.JButton listaReservafinalizar;
    private javax.swing.JLabel titleListaEstado;
    private javax.swing.JLabel titleListaFechaCheckIn;
    private javax.swing.JLabel titleListaFechaCheckOut;
    private javax.swing.JLabel titleListaHuespedes;
    private javax.swing.JLabel titleListaReserva;
    // End of variables declaration//GEN-END:variables
}
